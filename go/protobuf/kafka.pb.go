// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.1
// source: protobuf/kafka.proto

package _go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Side int32

const (
	Side_BUY  Side = 0
	Side_SELL Side = 1
	Side_PUT  Side = 2
	Side_CALL Side = 3
)

// Enum value maps for Side.
var (
	Side_name = map[int32]string{
		0: "BUY",
		1: "SELL",
		2: "PUT",
		3: "CALL",
	}
	Side_value = map[string]int32{
		"BUY":  0,
		"SELL": 1,
		"PUT":  2,
		"CALL": 3,
	}
)

func (x Side) Enum() *Side {
	p := new(Side)
	*p = x
	return p
}

func (x Side) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Side) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_kafka_proto_enumTypes[0].Descriptor()
}

func (Side) Type() protoreflect.EnumType {
	return &file_protobuf_kafka_proto_enumTypes[0]
}

func (x Side) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Side.Descriptor instead.
func (Side) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_kafka_proto_rawDescGZIP(), []int{0}
}

type Brokerage int32

const (
	Brokerage_INTERACTIVE_BROKERS Brokerage = 0
)

// Enum value maps for Brokerage.
var (
	Brokerage_name = map[int32]string{
		0: "INTERACTIVE_BROKERS",
	}
	Brokerage_value = map[string]int32{
		"INTERACTIVE_BROKERS": 0,
	}
)

func (x Brokerage) Enum() *Brokerage {
	p := new(Brokerage)
	*p = x
	return p
}

func (x Brokerage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Brokerage) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_kafka_proto_enumTypes[1].Descriptor()
}

func (Brokerage) Type() protoreflect.EnumType {
	return &file_protobuf_kafka_proto_enumTypes[1]
}

func (x Brokerage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Brokerage.Descriptor instead.
func (Brokerage) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_kafka_proto_rawDescGZIP(), []int{1}
}

type Crud int32

const (
	Crud_CREATE Crud = 0
	Crud_READ   Crud = 1
	Crud_UPDATE Crud = 2
	Crud_DELETE Crud = 3
)

// Enum value maps for Crud.
var (
	Crud_name = map[int32]string{
		0: "CREATE",
		1: "READ",
		2: "UPDATE",
		3: "DELETE",
	}
	Crud_value = map[string]int32{
		"CREATE": 0,
		"READ":   1,
		"UPDATE": 2,
		"DELETE": 3,
	}
)

func (x Crud) Enum() *Crud {
	p := new(Crud)
	*p = x
	return p
}

func (x Crud) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Crud) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_kafka_proto_enumTypes[2].Descriptor()
}

func (Crud) Type() protoreflect.EnumType {
	return &file_protobuf_kafka_proto_enumTypes[2]
}

func (x Crud) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Crud.Descriptor instead.
func (Crud) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_kafka_proto_rawDescGZIP(), []int{2}
}

type BrokerageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brokerage Brokerage `protobuf:"varint,1,opt,name=brokerage,proto3,enum=kafka.Brokerage" json:"brokerage,omitempty"`
	Username  string    `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password  string    `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *BrokerageInfo) Reset() {
	*x = BrokerageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_kafka_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerageInfo) ProtoMessage() {}

func (x *BrokerageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_kafka_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerageInfo.ProtoReflect.Descriptor instead.
func (*BrokerageInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_kafka_proto_rawDescGZIP(), []int{0}
}

func (x *BrokerageInfo) GetBrokerage() Brokerage {
	if x != nil {
		return x.Brokerage
	}
	return Brokerage_INTERACTIVE_BROKERS
}

func (x *BrokerageInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *BrokerageInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type OrderSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StrategyId int32                  `protobuf:"varint,2,opt,name=strategy_id,json=strategyId,proto3" json:"strategy_id,omitempty"`
	Ticker     string                 `protobuf:"bytes,3,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Side       Side                   `protobuf:"varint,4,opt,name=side,proto3,enum=kafka.Side" json:"side,omitempty"`
	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *OrderSignal) Reset() {
	*x = OrderSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_kafka_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderSignal) ProtoMessage() {}

func (x *OrderSignal) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_kafka_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderSignal.ProtoReflect.Descriptor instead.
func (*OrderSignal) Descriptor() ([]byte, []int) {
	return file_protobuf_kafka_proto_rawDescGZIP(), []int{1}
}

func (x *OrderSignal) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderSignal) GetStrategyId() int32 {
	if x != nil {
		return x.StrategyId
	}
	return 0
}

func (x *OrderSignal) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *OrderSignal) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_BUY
}

func (x *OrderSignal) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type OrderPlacement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StrategyId int32                  `protobuf:"varint,2,opt,name=strategy_id,json=strategyId,proto3" json:"strategy_id,omitempty"`
	UserId     int32                  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Ticker     string                 `protobuf:"bytes,4,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Side       Side                   `protobuf:"varint,5,opt,name=side,proto3,enum=kafka.Side" json:"side,omitempty"`
	Brokerage  Brokerage              `protobuf:"varint,6,opt,name=brokerage,proto3,enum=kafka.Brokerage" json:"brokerage,omitempty"`
	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *OrderPlacement) Reset() {
	*x = OrderPlacement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_kafka_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPlacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPlacement) ProtoMessage() {}

func (x *OrderPlacement) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_kafka_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPlacement.ProtoReflect.Descriptor instead.
func (*OrderPlacement) Descriptor() ([]byte, []int) {
	return file_protobuf_kafka_proto_rawDescGZIP(), []int{2}
}

func (x *OrderPlacement) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderPlacement) GetStrategyId() int32 {
	if x != nil {
		return x.StrategyId
	}
	return 0
}

func (x *OrderPlacement) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *OrderPlacement) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *OrderPlacement) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_BUY
}

func (x *OrderPlacement) GetBrokerage() Brokerage {
	if x != nil {
		return x.Brokerage
	}
	return Brokerage_INTERACTIVE_BROKERS
}

func (x *OrderPlacement) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type UserAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId     int32                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ActionType Crud                   `protobuf:"varint,3,opt,name=action_type,json=actionType,proto3,enum=kafka.Crud" json:"action_type,omitempty"`
	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	UserInfo   *UserAction_UserInfo   `protobuf:"bytes,5,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	Brokerages []*BrokerageInfo       `protobuf:"bytes,6,rep,name=brokerages,proto3" json:"brokerages,omitempty"`
}

func (x *UserAction) Reset() {
	*x = UserAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_kafka_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAction) ProtoMessage() {}

func (x *UserAction) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_kafka_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAction.ProtoReflect.Descriptor instead.
func (*UserAction) Descriptor() ([]byte, []int) {
	return file_protobuf_kafka_proto_rawDescGZIP(), []int{3}
}

func (x *UserAction) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserAction) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserAction) GetActionType() Crud {
	if x != nil {
		return x.ActionType
	}
	return Crud_CREATE
}

func (x *UserAction) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *UserAction) GetUserInfo() *UserAction_UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *UserAction) GetBrokerages() []*BrokerageInfo {
	if x != nil {
		return x.Brokerages
	}
	return nil
}

type SubscriptionAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId     int32                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StrategyId int32                  `protobuf:"varint,3,opt,name=strategy_id,json=strategyId,proto3" json:"strategy_id,omitempty"`
	ActionType Crud                   `protobuf:"varint,4,opt,name=action_type,json=actionType,proto3,enum=kafka.Crud" json:"action_type,omitempty"`
	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *SubscriptionAction) Reset() {
	*x = SubscriptionAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_kafka_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionAction) ProtoMessage() {}

func (x *SubscriptionAction) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_kafka_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionAction.ProtoReflect.Descriptor instead.
func (*SubscriptionAction) Descriptor() ([]byte, []int) {
	return file_protobuf_kafka_proto_rawDescGZIP(), []int{4}
}

func (x *SubscriptionAction) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubscriptionAction) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SubscriptionAction) GetStrategyId() int32 {
	if x != nil {
		return x.StrategyId
	}
	return 0
}

func (x *SubscriptionAction) GetActionType() Crud {
	if x != nil {
		return x.ActionType
	}
	return Crud_CREATE
}

func (x *SubscriptionAction) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type UserAction_UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Email     string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *UserAction_UserInfo) Reset() {
	*x = UserAction_UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_kafka_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAction_UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAction_UserInfo) ProtoMessage() {}

func (x *UserAction_UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_kafka_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAction_UserInfo.ProtoReflect.Descriptor instead.
func (*UserAction_UserInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_kafka_proto_rawDescGZIP(), []int{3, 0}
}

func (x *UserAction_UserInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserAction_UserInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserAction_UserInfo) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UserAction_UserInfo) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UserAction_UserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

var File_protobuf_kafka_proto protoreflect.FileDescriptor

var file_protobuf_kafka_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x77,
	0x0a, 0x0d, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2e, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b,
	0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xfd, 0x01, 0x0a, 0x0e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b,
	0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x12, 0x2e, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xa3, 0x03, 0x0a, 0x0a,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x2e, 0x43, 0x72, 0x75, 0x64, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x94, 0x01, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0xc6, 0x01, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e,
	0x43, 0x72, 0x75, 0x64, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2a, 0x2c, 0x0a, 0x04, 0x53, 0x69,
	0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x45, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x2a, 0x24, 0x0a, 0x09, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x53, 0x10, 0x00, 0x2a, 0x34,
	0x0a, 0x04, 0x43, 0x72, 0x75, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x03, 0x42, 0x18, 0x5a, 0x16, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x6e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protobuf_kafka_proto_rawDescOnce sync.Once
	file_protobuf_kafka_proto_rawDescData = file_protobuf_kafka_proto_rawDesc
)

func file_protobuf_kafka_proto_rawDescGZIP() []byte {
	file_protobuf_kafka_proto_rawDescOnce.Do(func() {
		file_protobuf_kafka_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_kafka_proto_rawDescData)
	})
	return file_protobuf_kafka_proto_rawDescData
}

var file_protobuf_kafka_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protobuf_kafka_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_protobuf_kafka_proto_goTypes = []interface{}{
	(Side)(0),                     // 0: kafka.Side
	(Brokerage)(0),                // 1: kafka.Brokerage
	(Crud)(0),                     // 2: kafka.Crud
	(*BrokerageInfo)(nil),         // 3: kafka.BrokerageInfo
	(*OrderSignal)(nil),           // 4: kafka.OrderSignal
	(*OrderPlacement)(nil),        // 5: kafka.OrderPlacement
	(*UserAction)(nil),            // 6: kafka.UserAction
	(*SubscriptionAction)(nil),    // 7: kafka.SubscriptionAction
	(*UserAction_UserInfo)(nil),   // 8: kafka.UserAction.UserInfo
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
}
var file_protobuf_kafka_proto_depIdxs = []int32{
	1,  // 0: kafka.BrokerageInfo.brokerage:type_name -> kafka.Brokerage
	0,  // 1: kafka.OrderSignal.side:type_name -> kafka.Side
	9,  // 2: kafka.OrderSignal.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 3: kafka.OrderPlacement.side:type_name -> kafka.Side
	1,  // 4: kafka.OrderPlacement.brokerage:type_name -> kafka.Brokerage
	9,  // 5: kafka.OrderPlacement.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 6: kafka.UserAction.action_type:type_name -> kafka.Crud
	9,  // 7: kafka.UserAction.timestamp:type_name -> google.protobuf.Timestamp
	8,  // 8: kafka.UserAction.user_info:type_name -> kafka.UserAction.UserInfo
	3,  // 9: kafka.UserAction.brokerages:type_name -> kafka.BrokerageInfo
	2,  // 10: kafka.SubscriptionAction.action_type:type_name -> kafka.Crud
	9,  // 11: kafka.SubscriptionAction.timestamp:type_name -> google.protobuf.Timestamp
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_protobuf_kafka_proto_init() }
func file_protobuf_kafka_proto_init() {
	if File_protobuf_kafka_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobuf_kafka_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_kafka_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_kafka_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPlacement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_kafka_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_kafka_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_kafka_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAction_UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_kafka_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protobuf_kafka_proto_goTypes,
		DependencyIndexes: file_protobuf_kafka_proto_depIdxs,
		EnumInfos:         file_protobuf_kafka_proto_enumTypes,
		MessageInfos:      file_protobuf_kafka_proto_msgTypes,
	}.Build()
	File_protobuf_kafka_proto = out.File
	file_protobuf_kafka_proto_rawDesc = nil
	file_protobuf_kafka_proto_goTypes = nil
	file_protobuf_kafka_proto_depIdxs = nil
}
